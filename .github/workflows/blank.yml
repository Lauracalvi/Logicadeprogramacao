# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
4-6
-2
import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

type (4)
<class 'int'>
type(4)
<class 'int'>
type 4
SyntaxError: invalid syntax
type4
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    type4
NameError: name 'type4' is not defined. Did you mean: 'type'?
NameError: name 'type4' is not defined. Did you mean: 'type'?
SyntaxError: invalid syntax

type
<class 'type'>
type (4.5)
<class 'float'>
type (7.9)
<class 'float'>
type 'luiz'
SyntaxError: invalid syntax
type ('Luiz')
<class 'str'>
type ('45')
<class 'str'>
type ('&')
<class 'str'>
5*2
10
typr (True)
Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    typr (True)
NameError: name 'typr' is not defined. Did you mean: 'type'?
type (True)
<class 'bool'>
<class 'bool'>
SyntaxError: invalid syntax
2=3
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
4+4
8
10-9
1
5*10
50
10/2
5.0
2**2
4
3**2
9
2**(1/2)
1.4142135623730951
4%3
1
10%2
0
2*3/2
3.0
2*4/5
1.6

(2*4)/5
1.6
5 + 9 + 7 + 8/4
23.0
1-4*3/6-3**2
-10.0
5**2 -4/2+(1+3*5)/2
31.0
5**2 -4/2+(1+3*5)**1/2/2
27.0
5**2 -4/2+(1+3*5)**(1/2)/2
25.0
2 * 5 % 3 - -8
9
2 * 5 % 3 - (-8)
9
5%3
2
2*5%3 – (-8)
SyntaxError: invalid character '–' (U+2013)
2*5%3 - (-8)
9
-2**-8 // 4
-1.0
((20 // 3) // 3) + 8**2/2
34.0
(30 % 4 * 33) * -1
-66
(30 % 4 * 3**3) * -1
-54
2=3
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
type
